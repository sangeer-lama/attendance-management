/* eslint-disable @typescript-eslint/ban-ts-comment */
//! Do not edit this file manually, it is generate by `prisma repo generator`

import { PrismaClient, Prisma, users,
 user_attendance, } from '@prisma/client';
import _ from 'lodash';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<Include, Select> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  'include'
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  'select' | 'distinct'
>;

export const prisma = new PrismaClient({
  log: ['error', 'info', 'query', 'warn'],
});

export const models = _.omit(prisma, [
  '$on',
  '$connect',
  '$disconnect',
  '$use',
  '$executeRaw',
  '$executeRawUnsafe',
  '$queryRaw',
  '$queryRawUnsafe',
  '$transaction',
]);

export const MODELS_NAME = {
  USERS: 'users',
  USER_ATTENDANCE: 'userAttendance',
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  users: users;
  userAttendance: user_attendance;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> = Prisma.Enumerable<
  keyof ModelStructure[T]
>;

export type ModelDelegate = Prisma.RejectOnNotFound | Prisma.RejectPerOperation | undefined;

export type ModelTypes<T = unknown> = {
  users: {
    Where: Prisma.usersWhereInput;
    Select: Prisma.usersSelect;
    Include: unknown;
    Create: Prisma.usersCreateInput | Prisma.usersUncheckedCreateInput;
    Update: Prisma.usersUpdateInput | Prisma.usersUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.usersOrderByWithRelationInput;
    Delegate: Prisma.usersDelegate<ModelDelegate>;
    GroupBy: Prisma.usersGroupByOutputType;
    // @ts-ignore
    Return: Prisma.usersGetPayload<T>;
  },
  userAttendance: {
    Where: Prisma.user_attendanceWhereInput;
    Select: Prisma.user_attendanceSelect;
    Include: Prisma.user_attendanceInclude;
    Create: Prisma.user_attendanceCreateInput | Prisma.user_attendanceUncheckedCreateInput;
    Update: Prisma.user_attendanceUpdateInput | Prisma.user_attendanceUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.user_attendanceOrderByWithRelationInput;
    Delegate: Prisma.user_attendanceDelegate<ModelDelegate>;
    GroupBy: Prisma.user_attendanceGroupByOutputType;
    // @ts-ignore
    Return: Prisma.user_attendanceGetPayload<T>;
  },
};
